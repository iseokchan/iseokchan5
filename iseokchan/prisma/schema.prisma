// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  teacher     Teacher?
  student     Student?
  username    String    @unique @db.VarChar(128)
  password    String?   @db.VarChar(256)
  name        String    @db.VarChar(32)
  sex         Sex
  dateOfBirth DateTime  @db.Date
  isActive    Boolean   @default(true)
  isAdmin     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum Sex {
  MALE
  FEMALE
}

model Teacher {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  Iseok       Iseok[]
  IseokStatus IseokStatus[]
}

model Student {
  id                   Int                    @id @default(autoincrement())
  user                 User                   @relation(fields: [userId], references: [id])
  userId               Int                    @unique
  studentRegistration  StudentRegistration[]
  iseokStudentRelation IseokStudentRelation[]
}

model StudentRegistration {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  year   Int
  grade  Int
  room   Int
  number Int

  @@unique([studentId, year])
  @@unique([year, grade, room, number])
}

model IseokType {
  id                  Int                @id @default(autoincrement())
  name                String             @unique @db.VarChar(32)
  shortName           String?            @unique @db.VarChar(8)
  color               String?            @db.VarChar(8)
  timeSelectOptions   TimeSelectOption[]
  approveSteps        Int                @default(1)
  minimumDuration     Int?
  maximumDuration     Int?
  minimumStudentCount Int?
  maximumStudentCount Int?
  studentRequired     Boolean
  teacherRequired     Boolean
  locationRequired    Boolean
  reasonRequired      Boolean
  timeOverlapAllowed  Boolean            @default(false)
  iseokable           Boolean            @default(true)
  Iseok               Iseok[]
}

enum TimeSelectOption {
  PERIOD
  TIME
  DURATION
}

model Iseok {
  id                   Int                    @id @default(autoincrement())
  iseokType            IseokType              @relation(fields: [iseokTypeId], references: [id])
  iseokTypeId          Int
  teacher              Teacher?               @relation(fields: [teacherId], references: [id])
  teacherId            Int
  iseokStudentRelation IseokStudentRelation[]
  location             String?
  reason               String?
  startTime            DateTime               @db.Timestamp()
  endTime              DateTime               @db.Timestamp()
  iseokStatuses        IseokStatus[]
}

model IseokStudentRelation {
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  iseok     Iseok   @relation(fields: [iseokId], references: [id])
  iseokId   Int

  @@id([studentId, iseokId])
}

model IseokStatus {
  id        Int      @id @default(autoincrement())
  status    Status
  iseok     Iseok    @relation(fields: [iseokId], references: [id])
  iseokId   Int
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
}

enum Status {
  APPROVED
  REJECTED
}

model Period {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(32)
  shortName              String?                  @db.VarChar(8)
  memo                   String?                  @db.VarChar(32)
  startTime              DateTime                 @db.Time()
  endTime                DateTime                 @db.Time()
  periodTemplateRelation PeriodTemplateRelation[]
}

model PeriodTemplate {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(32)
  shortName              String?                  @db.VarChar(8)
  iseokDates             IseokDate[]
  periodTemplateRelation PeriodTemplateRelation[]
}

model PeriodTemplateRelation {
  period           Period         @relation(fields: [periodId], references: [id])
  periodId         Int
  periodTemplate   PeriodTemplate @relation(fields: [periodTemplateId], references: [id])
  periodTemplateId Int

  @@id([periodId, periodTemplateId])
}

model IseokDate {
  date             DateTime        @unique @db.Date()
  PeriodTemplate   PeriodTemplate? @relation(fields: [periodTemplateId], references: [id])
  periodTemplateId Int?
}
